#!/usr/bin/env python

import math
import sys
import numpy as np
import tensorflow as tf
import toml

from config import DefaultConfig
from model import ParseModel

def usage():
    print("Usage: %s write-graph SHAPES GRAPH" % sys.argv[0])
    sys.exit(1)

def main(unused_args):
    if len(unused_args) != 3:
        usage()

    with open(unused_args[1]) as shapesfile:
        config = DefaultConfig()
        shapes = toml.loads(shapesfile.read())

    print(shapes)
    create_graph(config, shapes, unused_args[2])

def create_graph(config, shapes, graph_filename):
    gpuopts = tf.GPUOptions(per_process_gpu_memory_fraction=0.3)
    tfconfig = tf.ConfigProto(gpu_options=gpuopts)

    with tf.Graph().as_default(), tf.Session(config=tfconfig) as session:
        initializer = tf.random_uniform_initializer(-config.init_scale,
                                                    config.init_scale)


        with tf.variable_scope("model", reuse=None, initializer=initializer):
            m = ParseModel(config = config, shapes = shapes)

        init = tf.variables_initializer(tf.global_variables(), name='init')

        tf.train.write_graph(
            session.graph_def,
            './',
            graph_filename,
            as_text=False)

if __name__ == "__main__":
    tf.app.run()
